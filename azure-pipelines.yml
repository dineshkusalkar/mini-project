
trigger:
  batch: true
  branches:
    include:
    - master
   # - QA
    

pr: none

pool:
  name: my_agents

stages:
- stage: Build
  displayName: 'Build Docker image'
  jobs:
  - job: BuildAndPushDocker
    pool:
      name: my_agents
    steps:
   
    
    # - task: Docker@2
    #   inputs:
    #     containerRegistry: 'docker'
    #     repository: 'dineshmk/node-app'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfile'
    #     tags: 'latest'

    - task: AzureCLI@2
      name: terraformApply
      inputs:
        azureSubscription: 'azure'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          cd $(System.DefaultWorkingDirectory)/$(Build.SourceBranchName)/terraform
          echo "Hi"
          export TF_VAR_user_name="$(USER_NAME)"
          export TF_VAR_user_password="$(USER_PASSWORD)"
          export TF_VAR_user_rootpassword="$(USER_ROOTPASSWORD)"
          echo "Dinesh"
          terraform init -reconfigure -backend-config="access_key=$(TF_BACKEND_ACCESS_KEY)"
   

      
          echo "Dinu"
          terraform plan -lock=false
          echo "Dmk"                
          terraform apply --auto-approve  -lock=false
          client_id=$(terraform output kubelet_identity_client_id)
          echo $client_id
          echo "##vso[task.setvariable variable=test]$client_id"
          echo $(test)
    
  #.     - task: AzureCLI@2
     #   name: terraformApply
       #   inputs:
      #     azureSubscription: 'azure'
      #     scriptType: 'bash'
      #     scriptLocation: 'inlineScript'
      #     inlineScript: |
      #       cd $(System.DefaultWorkingDirectory)/$(Build.SourceBranchName)/terraform
        
      #         export TF_VAR_user_name="$(USER_NAME)"
      #         export TF_VAR_user_password="$(USER_PASSWORD)"
      #         export TF_VAR_user_rootpassword="$(USER_ROOTPASSWORD)"

      #          terraform init -reconfigure -backend-config="access_key=$(TF_BACKEND_ACCESS_KEY)"
      #          terraform plan                
      #          terraform apply --auto-approve
      #         client_id=$(terraform output kubelet_identity_client_id)
      #         echo $client_id
      #         echo "##vso[task.setvariable variable=test]$client_id"
      #         echo $(test)

      # - task: Bash@3
      #   inputs:
      #     targetType: 'inline'
      #     script: |
      #       cd $(System.DefaultWorkingDirectory)/$(Build.SourceBranchName)/kubernetes
      #         az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
      #         az aks get-credentials --resource-group mini-project-$(Build.SourceBranchName) --name AKS-$(Build.SourceBranchName) --overwrite-existing
      #         export new_test=$(test)
      #         envsubst '${new_test}' < secretsproviderclass.yaml > secretsproviderclass-new.yaml
      #         kubectl apply -f secretsproviderclass-new.yaml

      #         export new_id=$(AZURE_CLIENT_ID)
      #         envsubst '${new_id}' < webapp-deployment.yaml > webapp-deployment-new.yaml

      #         export new_pwd=$(AZURE_CLIENT_SECRET)
      #         envsubst '${new_pwd}' < webapp-deployment-new.yaml > webapp-deployment-update.yaml

      #         export tenant_id=$(AZURE_TENANT_ID)
      #         envsubst '${tenant_id}' < webapp-deployment-update.yaml > webapp-deployment-modified.yaml
            
      #         kubectl apply -f webapp-deployment-modified.yaml

      #         kubectl apply -f webapp-service.yaml
      #         kubectl apply -f db-deployment.yaml
      #         kubectl apply -f db-service.yaml
      #         kubectl apply -f hpaweb.yaml
      #         cat secretsproviderclass-new.yaml
      #         cat webapp-deployment-modified.yaml
