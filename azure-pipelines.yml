
trigger:
  batch: true
  branches:
    include:
    - master
    - QA
  
    

pr: none

pool:
  name: Agent001

stages:
- stage: Build
  displayName: 'Build Docker images'
  jobs:
  - job: BuildAndPushDocker
    pool:
      name: Agent001
    steps:
   
    
    # - task: Docker@2
    #   inputs:
    #     containerRegistry: 'docker'
    #     repository: 'dineshmk/node-app'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfile'
    #     tags: 'latest'

   

    - task: AzureCLI@2
      name: terraformApply
      inputs:
        azureSubscription: 'azure'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          cd $(System.DefaultWorkingDirectory)/$(Build.SourceBranchName)/terraform
          client_id='1234567890'
          echo $client_id
          echo "##vso[task.setvariable variable=test]$client_id"
          echo $(test)
          echo $(AZURE_CLIENT_ID)
          lient_id=$(AZURE_CLIENT_ID)
          echo $lient_id
          echo "##vso[task.setvariable variable=rest]$lient_id"
          echo $(rest)

    #         export TF_VAR_user_name="$(USER_NAME)"
    #         export TF_VAR_user_password="$(USER_PASSWORD)"
    #         export TF_VAR_user_rootpassword="$(USER_ROOTPASSWORD)"

    #            terraform init -reconfigure -backend-config="access_key=$(TF_BACKEND_ACCESS_KEY)"
    #            terraform destroy --auto-approve
    #         terraform plan                
    #         terraform apply --auto-approve
            
    #        client_id=$(terraform output kubelet_identity_client_id)
              

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd $(System.DefaultWorkingDirectory)/$(Build.SourceBranchName)/kubernetes
            # az login --service-principal -u $(AZURE_CLIENT_ID) -p $(AZURE_CLIENT_SECRET) --tenant $(AZURE_TENANT_ID)
            # az aks get-credentials --resource-group mini-project-$(Build.SourceBranchName) --name AKS-$(Build.SourceBranchName) --overwrite-existing
              export new_id= $(rest)
              echo $new_id
              envsubst '$new_id'< webapp-deployment.yaml > webapp-deployment-new.yaml
              kubectl apply -f webapp-deployment-new.yaml
              cat webapp-deployment-new.yaml

              export new_test=$(test)
              envsubst '${new_test}'< secretsproviderclass.yaml > secretsproviderclass-new.yaml
              cat secretsproviderclass-new.yaml
            #   kubectl apply -f secretsproviderclass-new.yaml

             
          

              # kubectl apply -f webapp-service.yaml
              # kubectl apply -f db-deployment.yaml
              # kubectl apply -f db-service.yaml
              # kubectl apply -f hpaweb.yaml
              # cat secretsproviderclass-new.yaml
              # cat webapp-deployment.yaml

