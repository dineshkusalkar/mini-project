
trigger:
  batch: true
  branches:
    include:
    - master
    

pr: none

pool:
  name: Agent001

stages:
- stage: Build
  displayName: 'Build Docker image'
  jobs:
  - job: BuildAndPushDocker
    pool:
      name: Agent001
    steps:
   
    
    # - task: Docker@2
    #   inputs:
    #     containerRegistry: 'docker'
    #     repository: 'dineshmk/node-app'
    #     command: 'buildAndPush'
    #     Dockerfile: '**/Dockerfile'
    #     tags: 'latest'

   

    - task: AzureCLI@2
      name: terraformApply
      inputs:
        azureSubscription: 'azure'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          cd $(System.DefaultWorkingDirectory)/$(Build.SourceBranchName)/terraform
          terraform init -reconfigure -backend-config="access_key=$(TF_BACKEND_ACCESS_KEY)"
          terraform plan 
          terraform apply --auto-approve
          terraform apply -refresh-only -auto-approve
          client_id=$(terraform output kubelet_identity_client_id)
          echo $client_id
          echo "##vso[task.setvariable variable=test]$client_id"
          echo $(test)

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          cd $(System.DefaultWorkingDirectory)/$(Build.SourceBranchName)/kubernetes
          az aks get-credentials --resource-group mini-project-$(Build.SourceBranchName) --name AKS-$(Build.SourceBranchName) --overwrite-existing
          export new_test=$(test)
          envsubst < secretsprovider_class.yaml > secretsprovider_class-new.yaml
          kubectl apply -f secretsprovider_class-new.yaml
          kubectl apply -f webapp_deployment.yaml
          kubectl apply -f webapp_service.yaml
          kubectl apply -f db_deployment.yaml
          kubectl apply -f db_service.yaml
          kubectl apply -f hpa_web.yaml
          cat secretsprovider_class-new.yaml
          cat webapp_deployment.yaml
